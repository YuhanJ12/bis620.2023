library(devtool)
install.packages("devtool")
library(devtools)
library(usethis)
library(testthat)
document()
document()
library(bis620.2023)
document()
setwd("~/Desktop/BIS620-Fall2023/bis620.2023")
document()
library(usethis)
usethis::use_readme_rmd()
library(haven)
library(usethis)
getwd()
use_github_action_check_standard()
library(devtools)
check()
document()
check()
library(pkgdown)
build_site_github_pages()
document()
build_site_github_pages()
document()
build_site_github_pages()
# R
add_one <- function(x) {
UseMethod("add_one", x)
}
add_one.default <- function(x) {
stop(paste("Don't know how to add_one to object of type", class(x)))
}
add_one.numeric <- function(x) {
print("Dispatched to `add_one.numeric`.")
x
}
cat("Calling add_one on a.")
add_one("a")
cat("Calling foo on the number 1.")
add_one(1)
plus = new_generic("plus", dispatch_args = c("x","y"))
library(S7)
plus = new_generic("plus", dispatch_args = c("x","y"))
method(plus, list(x=class_numeric,y=class_numeric)) = function(x,y) {
print("Dispatched to `add_one.numeric`.")
x + y
}
method(plus, list(x=class_numeric,y=class_numeric)) = function(x,y) {
x + y
}
plus(3.4,5)
library(ctrialsgov)
setwd("~/Desktop/Yale-Fall2022/BIS 623 Fall 2022/final project")
library(tidyverse)
library(plyr)
library(dplyr)
library(devtools)
library(car)
library(caret)
library(leaps)
library(MASS)
library(ggfortify)
library(ggplot2)
library(glmnet)
library(corrplot)
library(readr)
library(repr)
library(lmtest)
data = read.csv('AD_data.csv')
head(data)
data$PTGENDER = factor(data$PTGENDER)
data$PTRACCAT = factor(data$PTRACCAT)
data$PTMARRY = factor(data$PTMARRY)
summary(data)
data2 = data[,-1]
head(data2)
#continuous variables
c = data2[,-c(2,4,5)]
corrplot(cor(c),method = "square", type = "upper")
invisible(lapply(1:ncol(c), function(i) boxplot(c[, i])))
f = lm(MMSE ~1, data = data2)
f1 = lm(MMSE ~., data = data2)
step2 = stepAIC(f, direction = "forward", data=data2,scope=list(upper=f1,lower=f),
trace = FALSE)
summary(step2)
autoplot(step2, which = 1:6)
plot(residuals(step2),ylab='residuals')
abline(h=0,col='red')
plot(residuals(step2)[-length(residuals(step2))],residuals(step2)[-1],
xlab=expression(e[i]),ylab=expression(e[i+1]))
dwtest(MMSE ~ FDG + LEFT_HIPPO + TAU + CEREBRUM_TCC + PTEDUCAT +
APOE4 + TOTAL_WHITE + CEREBRUM_GRAY, data = data2)
hist(x$TAU) #right-skewed
fit2 = lm(MMSE ~ FDG + LEFT_HIPPO + log(TAU) + CEREBRUM_TCC + PTEDUCAT +
APOE4 + TOTAL_WHITE + CEREBRUM_GRAY, data = data2)
summary(fit2)
autoplot(fit2, which = 1:6)
dwtest(MMSE ~ FDG + LEFT_HIPPO + log(TAU) + CEREBRUM_TCC + PTEDUCAT +
APOE4 + TOTAL_WHITE + CEREBRUM_GRAY, data = data2)
plot(residuals(fit2),ylab='residuals')
abline(h=0,col='red')
f4 = lm(MMSE ~ FDG + LEFT_HIPPO + TAU + CEREBRUM_TCC + PTEDUCAT +
APOE4 + TOTAL_WHITE + CEREBRUM_GRAY + LEFT_HIPPO*FDG , data = data2
)
summary(f4)
autoplot(f4,which = 1:6)
#2
set.seed(444)
dt = sort(sample(nrow(data2), nrow(data2)*.7))
train<-data2[dt,]
test<-data2[-dt,]
#2 ridge
x_train = model.matrix(MMSE~.,train)[,-1]
y_train = train$MMSE
x_test = model.matrix(MMSE~.,test)[,-1]
y_test = test$MMSE
ridge_reg = glmnet(x_train, y_train, alpha = 0)
summary(ridge_reg)
cv_ridge <- cv.glmnet(x_train, y_train, alpha = 0)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
plot(cv_ridge)
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
# Model performance metrics
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
best_model = glmnet(x_train,y_train,alpha = 0, lambda = optimal_lambda)
coef(best_model)
# Prediction and evaluation on test data
predictions_test <- predict(ridge_reg, s = optimal_lambda, newx = x_test)
eval_results(y_test, predictions_test, test)
# Lasso
# Setting alpha = 1 implements lasso regression
lasso_reg <- cv.glmnet(x_train, y_train, alpha = 1)
# Best
lambda_best <- lasso_reg$lambda.min
lambda_best
lasso_model <- glmnet(x_train, y_train, alpha = 1, lambda = lambda_best)
coef(lasso_model)
predictions_valid <- predict(lasso_model, s = lambda_best, newx = x_test)
eval_results(y_test, predictions_valid, test)
lasso_model$beta
plot(coef(lasso_model))
?corrplot
?lm
?dwtest
?autoplot
?glmnet
?cv.glmnet
?eval_results
?predict
?stepAIC
library(shiny)
source("ct-util.R")
source("ct-util.R")
runApp('R')
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("ctgov.duckdb"),
read_only = TRUE
)
)
if (length(dbListTables(con)) == 0) {
stop("Problem reading from connection.")
}
ctgov_load_duckdb_file(file.path( "ctgov-derived.duckdb"))
studies = tbl(con, "studies")
setwd("~/Desktop/BIS620-Fall2023/bis620.2023/R")
source("ct-util.R")
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("~/Desktop/BIS620-Fall2023/ctgov.duckdb"),
read_only = TRUE
)
)
if (length(dbListTables(con)) == 0) {
stop("Problem reading from connection.")
}
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("~/Desktop/BIS620-Fall2023/ctgov/ctgov.duckdb"),
read_only = TRUE
)
)
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("~/Desktop/BIS620-Fall2023/ctgov/ctgov.duckdb"),
read_only = TRUE
)
)
if (length(dbListTables(con)) == 0) {
stop("Problem reading from connection.")
}
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","ctgov","ctgov.duckdb"),
read_only = TRUE
)
)
runApp()
runApp()
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("ctgov","ctgov.duckdb"),
read_only = TRUE
)
)
setwd("~/Desktop/BIS620-Fall2023/bis620.2023")
runApp('R')
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("ctgov","ctgov.duckdb"),
read_only = TRUE
)
)
setwd("~/Desktop/BIS620-Fall2023/bis620.2023/R")
runApp()
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("...","...","ctgov","ctgov.duckdb"),
read_only = TRUE
)
)
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","..","ctgov","ctgov.duckdb"),
read_only = TRUE
)
)
if (length(dbListTables(con)) == 0) {
stop("Problem reading from connection.")
}
ctgov_load_duckdb_file(file.path("..","..","ctgov","ctgov-derived.duckdb"))
studies = tbl(con, "studies")
library(dplyr)
library(duckdb)
library(tidyr)
library(purrr)
library(DBI)
library(DT)
library(ggplot2)
library(ctrialsgov)
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","..","ctgov","ctgov.duckdb"),
read_only = TRUE
)
)
if (length(dbListTables(con)) == 0) {
stop("Problem reading from connection.")
}
View(con)
con
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","..","ctgov","ctgov.duckdb"),
read_only = TRUE
)
)
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","..","ctgov.duckdb"),
read_only = TRUE
)
)
runApp()
setwd("~/Desktop/BIS620-Fall2023/bis620.2023/R")
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","ctgov.duckdb"),
read_only = TRUE
)
)
if (length(dbListTables(con)) == 0) {
stop("Problem reading from connection.")
}
runApp()
runApp()
setwd("~/Desktop/BIS620-Fall2023/bis620.2023/R")
runApp()
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","..","ctgov.duckdb"),
read_only = TRUE
)
)
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","..","ctgov.duckdb"),
read_only = TRUE
)
)
runApp()
runApp()
shiny::runApp('R')
runApp('R')
# Create the connection to a database and "studies" and "sponsors" tables.
con = dbConnect(
duckdb(
file.path("..","..","ctgov.duckdb"),
read_only = TRUE
)
)
runApp('R')
hello <- function(who = "world") {
sprintf("Hello, %s!", who)
# paste0("Hello,", who, "!")
}
library(usethis)
source("ct-util.R")
setwd("~/Desktop/BIS620-Fall2023/bis620.2023/R")
usethis::use_description()
update()
document()
library(testthat)
library(devtools)
document()
runApp()
runApp()
document()
rm(list = c("hello"))
document()
runApp('~/Desktop/BIS620-Fall2023/bis620.2023/inst/App')
setwd("~/Desktop/BIS620-Fall2023/bis620.2023/inst/App")
runApp()
shiny::runExample
bis620.2023::runApp()
document()
bis620.2023::runApp()
